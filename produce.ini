[]
prelude =
 import os

 collections = (
 #            'ublog-2015_for-yasi_2ndweek',
             'dev',
 )

 collection_clusters = {
     'dev': '2015-04-04.through.2014-04-10_EN.cfg',

     'ublog-2015_for-yasi_1stweek': '2015-04-04.through.2014-04-10_EN.cfg',
     'ublog-2015_for-yasi_2ndweek': '2015-04-04.through.2014-04-10_EN.cfg',
 }

#[tweets/share/%{collection}/%{name}.txt]
#dep.select = tweets/select/%{collection}/%{name}.gz
#recipe = zcat %{select} | bin/poultry show -t {t.id} > %{target}
#recipe = zcat tweets/select/%{collection}/%{name}.gz | bin/poultry show -t {t.id} > %{target}

#[tweets/hydrate/%{collection}/%{name}.gz]
#dep.share = tweets/share/%{name}.txt
#recipe =
#    [ ! -d tweets/hydrate/%{collection}/ ] && mkdir tweets/hydrate/%{collection}/

#    bin/twarc.py \
#    -c parts/etc/poultry.cfg \
#    -p twitter \
#    --hydrate tweets/share/%{collection}/%{name}.txt | gzip > %{target}

[.db.initialized]
recipe =
       bin/flock initdb &&
       touch %{target}

[tweets/db/%{collection}/%{name}.inserted]
dep.db = .db.initialized
dep.hydrate = tweets/hydrate/%{collection}/%{name}
dep.clusters = %{'clusters/{}'.format(collection_clusters[collection])}
recipe =
    [ ! -d tweets/db/%{collection}/ ] && mkdir tweets/db/%{collection}/

    zcat %{hydrate} \
    |\
    bin/flock -v debug insert \
    --collection=%{collection} \
    --clusters %{clusters} \
    --extract-retweets \
    --language en \
    && touch %{target}

[.tweets_%{collection}.inserted]
deps =
     %{'tweets/db/{c}/{n}.inserted'.format(c=collection, n=n) for n in sorted(os.listdir('tweets/hydrate/{}'.format(collection)))}
recipe =
       touch %{target}

[views/.%{view}.created]
dep.db = .db.initialized
dep.view_definition = views/%{view}.sql
recipe =
       psql -d twitter < %{view_definition} &&
       touch %{target}

[views/.%{view}.refreshed]
dep.view_created = views/.%{view}.created
deps = %{'.tweets_{collection}.inserted'.format(collection=collection) for collection in collections}
recipe =
       echo refresh materialized view %{view} | psql -d twitter &&
       touch %{target}

[.near_matches_%{collection}.found]
dep.tweets = .tweets_%{collection}.inserted
recipe =
       bin/flock find_near_matches --collection %{collection} &&
       touch %{target}

##psql -d twitter < update_near_matches.sql
#time psql -d twitter < create_views2.sql

[universe]
type = task
#dep.screen_name__user_mention_view = views/.screen_name__user_mention_view.refreshed
deps = %{'.near_matches_{collection}.found'.format(collection=collection) for collection in collections}

[initdb]
type = task
deps =
     .db.initialized

[dropdb]
type = task
recipe =
       bin/flock dropdb
       [ -e .db.initialized ] && rm .db.initialized || true

